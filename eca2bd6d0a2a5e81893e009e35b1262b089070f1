{
  "comments": [
    {
      "key": {
        "uuid": "ba7be1f8_2ea0ec8f",
        "filename": "jenkins/__init__.py",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 6987
      },
      "writtenOn": "2015-02-20T20:20:07Z",
      "side": 1,
      "message": "nit: maybe group this with the imports above?",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6ced46_5a4eb8c2",
        "filename": "jenkins/__init__.py",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-03-23T19:06:20Z",
      "side": 1,
      "message": "since it\u0027s a third party import I assumed we were still following the following groupings?:\n\n \u003csystem\u003e\n\n \u003c3rd party\u003e\n\n \u003cproject\u003e",
      "parentUuid": "ba7be1f8_2ea0ec8f",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_611af56f",
        "filename": "jenkins/__init__.py",
        "patchSetId": 3
      },
      "lineNbr": 431,
      "author": {
        "id": 6987
      },
      "writtenOn": "2015-02-20T20:20:07Z",
      "side": 1,
      "message": "should this just return self.plugins?",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_19919799",
        "filename": "jenkins/__init__.py",
        "patchSetId": 3
      },
      "lineNbr": 431,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-02-22T21:04:38Z",
      "side": 1,
      "message": "Possibly, and move the code to populate the plugins attribute into a separate function? The depth arg is putting me off a little since I\u0027m not sure of the best way to ensure that we\u0027re returning the correct depth of info, since this seems more of an API call to be used calling applications to get more detailed information.\n\nShould we leave this as a way to get direct access to the needed info?\nOr move it to a private method and only provide access through the plugins attribute?",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_a442220e",
        "filename": "jenkins/__init__.py",
        "patchSetId": 3
      },
      "lineNbr": 431,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-02-23T00:24:46Z",
      "side": 1,
      "message": "I think this would be useful for allowing consuming applications a way to directly access the info. For example, a long-running process that wants to periodically compare plugin version info from the same Jenkins master obtained at different times. Although I guess judicious use of deep copy should allow that to be done anyway.\n\nIf we do hide this method, there would have to be some method, \"refresh_plugins_info\" that would either set self._plugins to None or call the hidden _get_plugins_info method to pass its return value to the self.plugins setter (see my comment below on the \"plugins\" method).",
      "parentUuid": "ba7be1f8_19919799",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6ced46_7cd1affa",
        "filename": "jenkins/__init__.py",
        "patchSetId": 3
      },
      "lineNbr": 431,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-03-23T19:06:20Z",
      "side": 1,
      "message": "I guess the real question comes down to whether there should be methods to get the raw data as opposed to the parsed cached data that will be in the \u0027plugins\u0027 attribute.\n\nSince these methods also allow for control of the depth of info returned I\u0027m thinking of leaving them as is and have self.plugins populated by calling them rather than trying to make them get the info from the attribute.",
      "parentUuid": "ba7be1f8_a442220e",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_843b5e9b",
        "filename": "jenkins/__init__.py",
        "patchSetId": 3
      },
      "lineNbr": 469,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-02-23T00:24:46Z",
      "side": 1,
      "message": "Definitely not familiar with this pattern, but it looks interesting if a little non-obvious for newbies like myself.\n\nIt looks like the only way a consumer of this class could currently obtain updated plugins_info from the jenkins master is to either:\n\njenkins._plugins \u003d None\npinfo \u003d jenkins.plugins\n\nor:\n\njenksin.plugins \u003d jenkins.get_plugins_info()\n\nWhat do you think about a \"refresh_plugins_info\" method to handle a case like this? This would be useful for long-running processes that want to use this library but need to periodically validate that no plugin verions have changed. (For example, if someone wanted to tightly integrate Zuul and JJB...or maybe that\u0027s already a thing?)",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6ced46_7cca8f50",
        "filename": "jenkins/__init__.py",
        "patchSetId": 3
      },
      "lineNbr": 469,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-03-23T19:06:20Z",
      "side": 1,
      "message": "Decided to restore the get_plugin_info and leave both it and get_plugins_info as methods to retrieve raw plugin data from the jenkins server.\n\nAdding a refresh_plugins_info to allow the plugins property to be refreshed.",
      "parentUuid": "ba7be1f8_843b5e9b",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_44e32633",
        "filename": "jenkins/__init__.py",
        "patchSetId": 3
      },
      "lineNbr": 479,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-02-23T00:24:46Z",
      "side": 1,
      "message": "nit: pluralizing \"plugin_info\" seems like it would be a good idea, to stick with the established convention of using \"plugins_info\" to indicate an iterable of plugin info dicts.",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_821a7515",
        "filename": "jenkins/plugins.py",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-02-22T08:50:12Z",
      "side": 1,
      "message": "Do you think it would ever be possible that someone might try\n\na \u003d PluginVersion(\"0.1.2\")\n...\nb \u003d PluginVersion(\"0.1.2\")\n\nif a \u003e b:\n  do_something_clever()\nelse:\n  do_something_boring()\n\nAnd does this class support that possibility? I think this call to resources.parse_version() may fail since pkg_resouces.parse_version seems to expect a string value (or at least something string-like)",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_f991239b",
        "filename": "jenkins/plugins.py",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-02-22T21:04:38Z",
      "side": 1,
      "message": "Be unusual, but shouldn\u0027t be too difficult to support.",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_f92123fd",
        "filename": "jenkins/plugins.py",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-02-23T00:24:46Z",
      "side": 1,
      "message": "I just thought of a use case...someone might try to automatically compare plugin versions between two different Jenki. If there\u0027s not already a way to do that. \n\nIn fact, I might use it for this in the near future.",
      "parentUuid": "ba7be1f8_f991239b",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_e181854b",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 6987
      },
      "writtenOn": "2015-02-20T20:20:07Z",
      "side": 1,
      "message": "This seems like its missing some tests from the JJB implementation.  Do  you intend to just have just a few tests here and cover the rest in JJB?  At minimum maybe test an \u0027less than or equal\u0027 and \u0027greater than or equal\u0027 as well?",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_22baa9de",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-02-22T08:50:12Z",
      "side": 1,
      "message": "Ah this hadn\u0027t occurred to me, but it does make sense that all the existing version string comparisons be moved into this library.",
      "parentUuid": "ba7be1f8_e181854b",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_398c9b7f",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-02-22T21:04:38Z",
      "side": 1,
      "message": "Agreed, this should test the full spectrum I\u0027ll migrate the full range of tests, and probably move these to a separate file to allow for senarios similar to how it\u0027s done in JJB.",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_6ec5845a",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 811,
      "author": {
        "id": 6987
      },
      "writtenOn": "2015-02-20T20:20:07Z",
      "side": 1,
      "message": "this should fail?  the plugin_info_json is defined with version of \u00271.5\u0027",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_82f195cf",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 811,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-02-22T08:50:12Z",
      "side": 1,
      "message": "I think this should pass, going by the behavior of Maven 2.2.0:\n\nhttps://svn.apache.org/viewvc/maven/maven-2/tags/maven-2.2.0/maven-artifact/src/test/java/org/apache/maven/artifact/versioning/DefaultArtifactVersionTest.java?view\u003dmarkup\n\nLook for a function called \"testVersionComparing\"\n\nNot sure exactly which maven versioning scheme we should be attempting to emulate.",
      "parentUuid": "ba7be1f8_6ec5845a",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7be1f8_59ea2f10",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 811,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-02-22T21:04:38Z",
      "side": 1,
      "message": "Seems to be in keeping with both how maven and pkg_resources compare versions. Additional \u0027.0\u0027 are treated as being optional and insignificant unless followed by another significant number.",
      "revId": "eca2bd6d0a2a5e81893e009e35b1262b089070f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}