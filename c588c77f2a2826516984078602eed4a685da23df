{
  "comments": [
    {
      "key": {
        "uuid": "1a4dcd0f_835e90e7",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-11T11:36:36Z",
      "side": 1,
      "message": "I\u0027ve found it a little easier to follow by ensuring it\u0027s clear where the exceptions are coming from instead of previously just having the class name as sometimes it wasn\u0027t obvious if it was a python-jenkins or a library exception.",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_83a1b0ab",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 303,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-11T11:36:36Z",
      "side": 1,
      "message": "Oops, this is a mistake, should only return None for the NotFoundException.",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_590b7e24",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 358,
      "author": {
        "id": 679
      },
      "writtenOn": "2015-08-11T17:13:27Z",
      "side": 1,
      "message": "For a first-cut conversion like this, doing this in an exception handler makes sense, but it might be worth considering handling the response codes directly, *then* calling raise_for_status() (and doing the empty body check)…",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_225f3f10",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 358,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-12T14:54:29Z",
      "side": 1,
      "message": "Agreed, probably also the correct next step before implementing support for custom response handlers.",
      "parentUuid": "1a4dcd0f_590b7e24",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_a2534f15",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 362,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-12T14:54:29Z",
      "side": 1,
      "message": "Guess this comment is no longer relevant either.",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_e3719445",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-11T11:36:36Z",
      "side": 1,
      "message": "I suspect we should only catch the NotFoundException here and allow any other HTTPError from requests to propagate.",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_03de006d",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-11T11:36:36Z",
      "side": 1,
      "message": "I suspect we could actually skip handling many of these errors here now and delegate to the _response_handler method instead, but as a first pass I didn\u0027t want to deviate too much from the existing code/behaviour.",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_a385cc59",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 495,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-11T11:36:36Z",
      "side": 1,
      "message": "I suspect we could actually skip handling many of these errors here now and delegate to the _response_handler method instead, but as a first pass I didn\u0027t want to deviate too much from the existing code/behaviour.",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_838f7022",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 796,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-11T11:36:36Z",
      "side": 1,
      "message": "Perhaps we should just catch NotFoundException?",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_03a4c0a3",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 952,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-11T11:36:36Z",
      "side": 1,
      "message": "Maybe just catch NotFoundException?",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_c3ad7889",
        "filename": "jenkins/__init__.py",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-11T11:36:36Z",
      "side": 1,
      "message": "Oops, this should definitely only catch the NotFoundException.",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_d95c6e1b",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 679
      },
      "writtenOn": "2015-08-11T17:13:27Z",
      "side": 1,
      "message": "I\u0027d rather import requests directly, then use \"requests.Response()\"; makes it a little more explicit that we\u0027re doing something with requests and reduces how much you need to type…",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_4a27fdb5",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-12T14:54:29Z",
      "side": 1,
      "message": "Was going for trying to use directly from the jenkins module so any changes there to imports would immediately break the tests, but probably doesn\u0027t make much difference here or help much.",
      "parentUuid": "1a4dcd0f_d95c6e1b",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_a23d8f8f",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-12T14:54:29Z",
      "side": 1,
      "message": "Forgot to strip this as well.",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_59f5beea",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 679
      },
      "writtenOn": "2015-08-11T17:13:27Z",
      "side": 1,
      "message": "You should be able to mock \u0027requests.Session.send\u0027 and not even involve the jenkins module.  I tend to find that a bit clearer.  It\u0027s also worth pointing out that, in cases where I\u0027ve imported a module (like jenkins here, or like requests, as I suggest above), I typically use mock.patch.object().  Assuming the \"import requests\", that would change this to be:\n\n    @patch.object(requests, \u0027Session.send\u0027, autospec\u003dTrue)",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_477b7dbe",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-08-12T14:54:29Z",
      "side": 1,
      "message": "That wouldn\u0027t work, or at least is bad practice if it does, for python mock, you should mock in the namespace that the module/object is imported into. See https://docs.python.org/3/library/unittest.mock.html#where-to-patch\n\nWhen mocking the session object I want to mock the one imported into the jenkins namespace, if for some reason we want to use the Session object locally to perform another task we wouldn\u0027t want to get one that is mocked.",
      "parentUuid": "1a4dcd0f_59f5beea",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a4dcd0f_6983d903",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 679
      },
      "writtenOn": "2015-08-12T15:16:07Z",
      "side": 1,
      "message": "1. That does work; that particular idiom is used all over nova, novaclient, and virtually everything I\u0027ve written.\n\n2. I have never seen that advice you\u0027ve linked to, and as I say, everything I\u0027ve seen that uses mock mocks out from the underlying package.  This is, in fact, one of the reasons nova and other OpenStack projects enforce the convention of importing modules rather than symbols from modules.  I can definitely see the advantages of this advice in the case where you import the symbols, but that\u0027s not what we\u0027re doing here; in essence, \"jenkins.requests.Session.send\" is simply an alias for \"requests.Session.send\", and if you patch the former, you are *also* patching the latter.  In that situation, I think I prefer the shorter version, to make it clear exactly what\u0027s being patched.",
      "parentUuid": "1a4dcd0f_477b7dbe",
      "revId": "c588c77f2a2826516984078602eed4a685da23df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}