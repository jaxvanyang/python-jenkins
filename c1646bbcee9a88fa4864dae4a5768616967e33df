{
  "comments": [
    {
      "key": {
        "uuid": "AAAAXX//yKw\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 11020
      },
      "writtenOn": "2014-04-27T19:52:31Z",
      "side": 1,
      "message": "Missing assert statements.",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXX//yCo\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 11011
      },
      "writtenOn": "2014-04-27T21:21:39Z",
      "side": 1,
      "message": "Good call. I\u0027ll look at this later.",
      "parentUuid": "AAAAXX//yKw\u003d",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXX//xBU\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 11011
      },
      "writtenOn": "2014-04-28T06:00:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAAAXX//yKw\u003d",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXX//yKs\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 11020
      },
      "writtenOn": "2014-04-27T19:52:31Z",
      "side": 1,
      "message": "why don\u0027t you call self.fail() directly, what\u0027s with the \"if 1\" statement?",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXX//yB0\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 11011
      },
      "writtenOn": "2014-04-27T21:21:39Z",
      "side": 1,
      "message": "Ha ha. Yeah, this is stupid. It\u0027s because if I put `#pragma: no cover` on the self.fail line then it\u0027s more than 78 characters. I\u0027m thinking of using unittest.assertRaises as you suggest below (and importing unittest2 for 2.6)",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXX//yHY\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 11020
      },
      "writtenOn": "2014-04-27T19:52:31Z",
      "side": 1,
      "message": "You could also have self.assertRaises(jenkins.JenkinsException, j.jenkins_open, request, add_crumb\u003dFalse), but then I guess you couldn\u0027t test for the actual string. I\u0027m assuming that this needs to work in Py26, but in py27 assertRaises is also a context manager:\n\nwith self.assertRaises(jenkins.JenkinsException) as exc:\n    j.jenkins_open(request, add_crumb\u003dFalse)\nself.assertEqual(str(exc), \u0027Error in request.Possibly authentication failed [401]\u0027)",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXX//yBk\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 11011
      },
      "writtenOn": "2014-04-27T21:21:39Z",
      "side": 1,
      "message": "Yeah. I like this idea. It\u0027s clearer than what I have. I could import unittest2 for Python 2.6. Or use pytest.raises, but OpenStack projects like to use testrepository along with unittest discover. Folks may or may not want to introduce pytest.",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXX//yAE\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 11020
      },
      "writtenOn": "2014-04-27T21:53:09Z",
      "side": 1,
      "message": "Yeah, let\u0027s go with unittest2. Let\u0027s not introduce a py.test requirement just for pytest.raises, unittest2 fits the bill and people are more familiar with its API.",
      "parentUuid": "AAAAXX//yBk\u003d",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXX//xg0\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 11011
      },
      "writtenOn": "2014-04-28T02:29:38Z",
      "side": 1,
      "message": "In order to add the dependency, we need to modify setup.py or setup.cfg (I guess using pbr), so I\u0027m not really wanting to do this before https://review.openstack.org/90455 gets merged. Even then I\u0027m not sure how with pbr you can specify that you want unittest2 for Python 2 but not for Python 3.",
      "parentUuid": "AAAAXX//yAE\u003d",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXX//xBQ\u003d",
        "filename": "tests/test_jenkins.py",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 11011
      },
      "writtenOn": "2014-04-28T06:00:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAAAXX//yAE\u003d",
      "revId": "c1646bbcee9a88fa4864dae4a5768616967e33df",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}