{
  "comments": [
    {
      "key": {
        "uuid": "3a50d1a3_27b035dd",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-07-20T14:27:52Z",
      "side": 1,
      "message": "I\u0027m a little concerned that err_handle is somewhat misleading. What about a custom err_handler for other errors that occur, such as providing a callback to provide handling for other errors.\n\nI would suggest something that identifies this as response decoding at least.\n\nRather than trying to hack various options in to allow changing how we handle different error scenarios, perhaps a setting to control whether we return the raw response object instead of the response it self would be a solution here?",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_9d4958d3",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 16889
      },
      "writtenOn": "2015-07-20T14:49:38Z",
      "side": 1,
      "message": "first understand the issue then you can offer a different name for this variable",
      "parentUuid": "3a50d1a3_27b035dd",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_871d8975",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 208,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-07-20T14:27:52Z",
      "side": 1,
      "message": "trailing slash is not needed, just indent the following line by 4 spaces from the start of the preceding line and sphinx will handle the continuation just fine.",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_1dfea86b",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 208,
      "author": {
        "id": 16889
      },
      "writtenOn": "2015-07-20T14:49:38Z",
      "side": 1,
      "message": "ok first finish other remarks",
      "parentUuid": "3a50d1a3_871d8975",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_c74631bf",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 322,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-07-20T14:27:52Z",
      "side": 1,
      "message": "What is the problem that you\u0027re running into with the strict decoding? Can you simulate this with a basic test.",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_7de24cd7",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 322,
      "author": {
        "id": 16889
      },
      "writtenOn": "2015-07-20T14:49:38Z",
      "side": 1,
      "message": "\u003e\u003e\u003e encodings.codecs.utf_8_decode(\u0027\\x00\\x00\\xfe\\xff\u0027)\nTraceback (most recent call last):\n  File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\nUnicodeDecodeError: \u0027utf8\u0027 codec can\u0027t decode byte 0xfe in position 2: invalid start byte\n\u003e\u003e\u003e encodings.codecs.utf_8_decode(\u0027\\x00\\x00\\xfe\\xff\u0027,\u0027ignore\u0027)\n(u\u0027\\x00\\x00\u0027, 4)",
      "parentUuid": "3a50d1a3_c74631bf",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_a75d16eb",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 322,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-07-20T18:29:06Z",
      "side": 1,
      "message": "Ok, to be more specific:\n\nWhat response are you getting from a Jenkins server that triggers this?\n\nCan always provide garbage to trigger an error somewhere, but that doesn\u0027t actually identify in what scenarios would a response back from Jenkins not be utf-8 encoded.",
      "parentUuid": "3a50d1a3_7de24cd7",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_a75f5671",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 322,
      "author": {
        "id": 16889
      },
      "writtenOn": "2015-07-20T18:38:20Z",
      "side": 1,
      "message": "i\u0027m running a very long script that compiles lots of stuff, this exception happens when i\u0027m trying to get the output.\nyou can blame the script but still this module is not flexible enough",
      "parentUuid": "3a50d1a3_a75d16eb",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_837d60b3",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 322,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-07-21T00:53:53Z",
      "side": 1,
      "message": "Is there anyway to debug the raw response due to that script?\n\nI suspect the underlying problem is that we are decoding a response that is not in utf-8 and has a different charset specified in the headers. So if instead of just assuming utf-8, we decoded the response based on what we\u0027re told to use to decode (provided we check that the return type is actually text), it would work as expected.\n\nOther than that, I would be looking to change the code to register a custom response handler that is called each time, where the default is to decode the response using the charset from the headers.\n\nBut allowing to ignore the errors means that we are returning a potentially corrupted response instead, with no way for the caller to get the original response to do anything with it. That potentially renders the response worthless and at the same time adds another option to the API that must be supported in the future.\n\n\nIf we can\u0027t decode the response correctly, then we need to find a way to allow the caller to handle the response instead rather than trashing it and returning garbage.",
      "parentUuid": "3a50d1a3_a75f5671",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_8cca656d",
        "filename": "jenkins/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 322,
      "author": {
        "id": 16889
      },
      "writtenOn": "2015-07-21T07:53:42Z",
      "side": 1,
      "message": "i have no idea what is the char-set of the response and how to check it, if you will explain how i can check this.\nbut i do know that the assumption that jenkins returns utf8 is wrong and causes errors.",
      "parentUuid": "3a50d1a3_837d60b3",
      "revId": "b8c3100c15d26eaf4df4608911b9156a3f98cec7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}