{
  "comments": [
    {
      "key": {
        "uuid": "baa201ad_2ff2736f",
        "filename": "jenkins/__init__.py",
        "patchSetId": 7
      },
      "lineNbr": 333,
      "author": {
        "id": 7156
      },
      "writtenOn": "2014-10-01T23:07:38Z",
      "side": 1,
      "message": "I would suggest creating get_plugins_info(self, depth\u003d2) AND get_plugin_info(self, name, depth\u003d2).\n\nThe method name will make the expected return explicit:\n- get_plugins_info always return a list of dicts (or None)\n- get_plugin_info always return a dict (or None)\n\nget_plugin_info could (re)use get_plugins_info and filter its output.\n\nExplicit is better than implicit.",
      "revId": "e324f24f2abd27669da43050bb77a89149a181f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_55bae1c0",
        "filename": "jenkins/__init__.py",
        "patchSetId": 7
      },
      "lineNbr": 333,
      "author": {
        "id": 6987
      },
      "writtenOn": "2014-10-02T06:41:08Z",
      "side": 1,
      "message": "How would you feel about the same method as proposed except that it always returns a list (or None)?  \n\n* if name is not specified return a list of all plugins\n* if a plugin name is specified and it is installed then return a list of one plugin?\n* if there are no plugins or the named plugin cannot be found then return an empty list?",
      "parentUuid": "baa201ad_2ff2736f",
      "revId": "e324f24f2abd27669da43050bb77a89149a181f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_d6f06969",
        "filename": "jenkins/__init__.py",
        "patchSetId": 7
      },
      "lineNbr": 333,
      "author": {
        "id": 7156
      },
      "writtenOn": "2014-10-03T22:09:38Z",
      "side": 1,
      "message": "I still prefer explicit over implicit/automagic.",
      "parentUuid": "baa201ad_55bae1c0",
      "revId": "e324f24f2abd27669da43050bb77a89149a181f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_1c7bd6f5",
        "filename": "jenkins/__init__.py",
        "patchSetId": 7
      },
      "lineNbr": 333,
      "author": {
        "id": 6987
      },
      "writtenOn": "2014-10-06T17:47:23Z",
      "side": 1,
      "message": "I believe python function overloading is only supported in python 3 however we still need to support python 2.6 \u0026 2.7.  I think it\u0027s possible to make method overloading work in python 2.7 but since that feature is not supported in the core language I don\u0027t think it\u0027s the pythonic way to handle this situation.  If we still one 2 functions to get plugin info then an option would be to create 2 different function names like get_all_plugin_info(self, depth\u003d2) \u0026 get_plugin_info(self, name, depth\u003d2). \n\nWith that being said, I still prefer one function over two in this case, even if function overloading is supported.",
      "parentUuid": "baa201ad_d6f06969",
      "revId": "e324f24f2abd27669da43050bb77a89149a181f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_92440d1c",
        "filename": "jenkins/__init__.py",
        "patchSetId": 7
      },
      "lineNbr": 333,
      "author": {
        "id": 7156
      },
      "writtenOn": "2014-10-06T18:46:43Z",
      "side": 1,
      "message": "We don\u0027t need function overloading.\n\nWhat I suggest is 2 distinct methods (instead of one doing both):\n- one to get \"many\" plugins: get_plugins_info(self, depth\u003d2)\n- one to get \"one\" plugin: get_plugin_info(self, name, depth\u003d2)\n\nAny decent library makes a distinction between methods returning \"many\" and those returning \"one\", list() vs get(). See any OpenStack client libraries.",
      "parentUuid": "baa201ad_1c7bd6f5",
      "revId": "e324f24f2abd27669da43050bb77a89149a181f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_affd833d",
        "filename": "jenkins/__init__.py",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 7156
      },
      "writtenOn": "2014-10-01T23:07:38Z",
      "side": 1,
      "message": "Can we make the use of depth explicit? At first glance, I thought it was unused. I know that other methods use locals() but I think it\u0027s a problem. We should address it afterward in a different change.",
      "revId": "e324f24f2abd27669da43050bb77a89149a181f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_352c7d02",
        "filename": "jenkins/__init__.py",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 6987
      },
      "writtenOn": "2014-10-02T06:41:08Z",
      "side": 1,
      "message": "that sounds like a good idea but i\u0027m not sure what that actually means.  what would that look like?",
      "parentUuid": "baa201ad_affd833d",
      "revId": "e324f24f2abd27669da43050bb77a89149a181f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}